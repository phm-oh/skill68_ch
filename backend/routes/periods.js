// backend/routes/periods.js
// Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô

const express = require('express');
const router = express.Router();

// Import Controllers ‡πÅ‡∏•‡∏∞ Middleware
const periodController = require('../controllers/periodController');
const { authenticateToken, requireRole } = require('../middleware/auth');
const { validatePeriod } = require('../middleware/validation');
const { body } = require('express-validator');
const { handleValidationErrors } = require('../middleware/validation');

// Validation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
const validateStatusToggle = [
  body('is_active')
    .isBoolean()
    .withMessage('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô true ‡∏´‡∏£‡∏∑‡∏≠ false'),
  
  handleValidationErrors
];

// Route: GET /api/periods
// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/', 
  authenticateToken,
  periodController.getAllPeriods
);

// Route: GET /api/periods/active
// ‡∏î‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
router.get('/active', 
  authenticateToken,
  periodController.getActivePeriods
);

// Route: GET /api/periods/:id
// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡∏≤‡∏° ID
router.get('/:id', 
  authenticateToken,
  periodController.getPeriodById
);

// Route: POST /api/periods
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HR)
router.post('/', 
  authenticateToken, 
  requireRole('hr'), 
  validatePeriod, 
  periodController.createPeriod
);

// Route: PUT /api/periods/:id
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HR)
router.put('/:id', 
  authenticateToken, 
  requireRole('hr'),
  [
    body('period_name')
      .optional()
      .isLength({ min: 3, max: 100 })
      .withMessage('‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 3-100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'),
    
    body('start_date')
      .optional()
      .isISO8601()
      .withMessage('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (YYYY-MM-DD)'),
    
    body('end_date')
      .optional()
      .isISO8601()
      .withMessage('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (YYYY-MM-DD)'),
    
    body('description')
      .optional()
      .isLength({ max: 500 })
      .withMessage('‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 500 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'),
    
    body('is_active')
      .optional()
      .isBoolean()
      .withMessage('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô true ‡∏´‡∏£‡∏∑‡∏≠ false'),
    
    handleValidationErrors
  ],
  periodController.updatePeriod
);

// Route: PATCH /api/periods/:id/status
// ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HR)
router.patch('/:id/status', 
  authenticateToken, 
  requireRole('hr'), 
  validateStatusToggle,
  periodController.togglePeriodStatus
);

// Route: DELETE /api/periods/:id
// ‡∏•‡∏ö‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HR)
router.delete('/:id', 
  authenticateToken, 
  requireRole('hr'), 
  periodController.deletePeriod
);

// Route: GET /api/periods/:id/statistics
// ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
router.get('/:id/statistics', 
  authenticateToken,
  requireRole(['hr', 'committee']),
  periodController.getPeriodStatistics
);

// Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
router.get('/test/info', (req, res) => {
  res.json({
    success: true,
    message: 'üìÖ Period routes working!',
    endpoints: {
      getAll: 'GET /api/periods',
      getActive: 'GET /api/periods/active',
      getById: 'GET /api/periods/:id',
      create: 'POST /api/periods (HR only)',
      update: 'PUT /api/periods/:id (HR only)',
      toggleStatus: 'PATCH /api/periods/:id/status (HR only)',
      delete: 'DELETE /api/periods/:id (HR only)',
      statistics: 'GET /api/periods/:id/statistics (HR/Committee)'
    },
    sample_period: {
      period_name: "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ 2568",
      description: "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ",
      start_date: "2025-01-01",
      end_date: "2025-01-31",
      is_active: true
    },
    permissions: {
      hr: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á',
      committee: '‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ',
      evaluatee: '‡∏î‡∏π‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ'
    }
  });
});

module.exports = router;