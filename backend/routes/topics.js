// backend/routes/topics.js
// Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î

const express = require('express');
const router = express.Router();

// Import Controllers ‡πÅ‡∏•‡∏∞ Middleware
const topicController = require('../controllers/topicController');
const { authenticateToken, requireRole } = require('../middleware/auth');
const { validateTopic, validateCriteria } = require('../middleware/validation');

// ====== TOPIC ROUTES ======

// Route: GET /api/topics/period/:periodId
// ‡∏î‡∏∂‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
router.get('/period/:periodId', 
  authenticateToken,
  topicController.getTopicsByPeriod
);

// Route: GET /api/topics/:id
// ‡∏î‡∏∂‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡∏≤‡∏° ID ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î
router.get('/:id', 
  authenticateToken,
  topicController.getTopicById
);

// Route: POST /api/topics/period/:periodId
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HR)
router.post('/period/:periodId', 
  authenticateToken, 
  requireRole('hr'), 
  validateTopic, 
  topicController.createTopic
);

// Route: PUT /api/topics/:id
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HR)
router.put('/:id', 
  authenticateToken, 
  requireRole('hr'), 
  [
    // Validation ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    ...validateTopic.filter(middleware => middleware.name !== 'handleValidationErrors')
  ],
  topicController.updateTopic
);

// Route: DELETE /api/topics/:id
// ‡∏•‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HR)
router.delete('/:id', 
  authenticateToken, 
  requireRole('hr'), 
  topicController.deleteTopic
);

// ====== CRITERIA ROUTES ======

// Route: GET /api/topics/:topicId/criteria
// ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
router.get('/:topicId/criteria', 
  authenticateToken,
  topicController.getCriteriaByTopic
);

// Route: GET /api/topics/criteria/:id
// ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ï‡∏≤‡∏° ID
router.get('/criteria/:id', 
  authenticateToken,
  topicController.getCriteriaById
);

// Route: POST /api/topics/:topicId/criteria
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HR)
router.post('/:topicId/criteria', 
  authenticateToken, 
  requireRole('hr'), 
  validateCriteria, 
  topicController.createCriteria
);

// Route: PUT /api/topics/criteria/:id
// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HR)
router.put('/criteria/:id', 
  authenticateToken, 
  requireRole('hr'), 
  [
    // Validation ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    ...validateCriteria.filter(middleware => middleware.name !== 'handleValidationErrors')
  ],
  topicController.updateCriteria
);

// Route: DELETE /api/topics/criteria/:id
// ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HR)
router.delete('/criteria/:id', 
  authenticateToken, 
  requireRole('hr'), 
  topicController.deleteCriteria
);

// Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
router.get('/test/info', (req, res) => {
  res.json({
    success: true,
    message: 'üìã Topics & Criteria routes working!',
    endpoints: {
      topics: {
        getByPeriod: 'GET /api/topics/period/:periodId',
        getById: 'GET /api/topics/:id',
        create: 'POST /api/topics/period/:periodId (HR only)',
        update: 'PUT /api/topics/:id (HR only)',
        delete: 'DELETE /api/topics/:id (HR only)'
      },
      criteria: {
        getByTopic: 'GET /api/topics/:topicId/criteria',
        getById: 'GET /api/topics/criteria/:id',
        create: 'POST /api/topics/:topicId/criteria (HR only)',
        update: 'PUT /api/topics/criteria/:id (HR only)',
        delete: 'DELETE /api/topics/criteria/:id (HR only)'
      }
    },
    sample_topic: {
      topic_name: "‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô",
      weight_percentage: 60,
      sort_order: 1
    },
    sample_criteria: {
      criteria_name: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°",
      weight_score: 25,
      evaluation_type: "scale_1_4",
      evidence_required: true,
      evidence_types: ["pdf", "image", "url"]
    },
    evaluation_types: {
      binary: "‡∏°‡∏µ/‡πÑ‡∏°‡πà‡∏°‡∏µ (0-1)",
      scale_1_4: "‡∏™‡πÄ‡∏Å‡∏• 1-4 ‡∏£‡∏∞‡∏î‡∏±‡∏ö",
      custom_options: "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á"
    },
    permissions: {
      hr: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á',
      committee: '‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
      evaluatee: '‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
    }
  });
});

module.exports = router;