// backend/routes/uploads.js
// Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö File Upload ‡πÅ‡∏•‡∏∞ Committee Assignment

const express = require('express');
const router = express.Router();

// Import Controllers ‡πÅ‡∏•‡∏∞ Middleware
const uploadController = require('../controllers/uploadController');
const { authenticateToken, requireRole } = require('../middleware/auth');
const { uploadEvidence, uploadProfile, handleUploadError } = require('../middleware/fileUpload');

// ====== FILE UPLOAD ROUTES ======

// Route: POST /api/uploads/evidence
// ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡πÑ‡∏ü‡∏•‡πå)
router.post('/evidence', 
  authenticateToken,
  (req, res, next) => {
    uploadEvidence(req, res, (err) => {
      if (err) {
        return handleUploadError(err, req, res, next);
      }
      next();
    });
  },
  uploadController.uploadEvidence
);

// Route: POST /api/uploads/profile
// ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (1 ‡πÑ‡∏ü‡∏•‡πå)
router.post('/profile', 
  authenticateToken,
  (req, res, next) => {
    uploadProfile(req, res, (err) => {
      if (err) {
        return handleUploadError(err, req, res, next);
      }
      next();
    });
  },
  uploadController.uploadProfile
);

// Route: GET /api/uploads/files
// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
router.get('/files', 
  authenticateToken,
  uploadController.getUploadedFiles
);

// Route: GET /api/uploads/download/:filename
// ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
router.get('/download/:filename', 
  authenticateToken,
  uploadController.downloadFile
);

// Route: DELETE /api/uploads/:filename
// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
router.delete('/:filename', 
  authenticateToken,
  uploadController.deleteUploadedFile
);

// Route: GET /api/uploads/stats
// ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HR)
router.get('/stats', 
  authenticateToken,
  requireRole('hr'),
  uploadController.getStorageStats
);

// Route: POST /api/uploads/cleanup
// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HR)
router.post('/cleanup', 
  authenticateToken,
  requireRole('hr'),
  uploadController.cleanupOldFiles
);

// Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
router.get('/test/info', (req, res) => {
  res.json({
    success: true,
    message: 'üìé Upload routes working!',
    endpoints: {
      uploadEvidence: 'POST /api/uploads/evidence (max 5 files)',
      uploadProfile: 'POST /api/uploads/profile (1 file)',
      getFiles: 'GET /api/uploads/files',
      downloadFile: 'GET /api/uploads/download/:filename',
      deleteFile: 'DELETE /api/uploads/:filename',
      getStats: 'GET /api/uploads/stats (HR only)',
      cleanup: 'POST /api/uploads/cleanup (HR only)'
    },
    upload_limits: {
      max_file_size: '10MB',
      max_files_per_upload: 5,
      allowed_types: {
        documents: ['PDF', 'DOC', 'DOCX', 'XLS', 'XLSX'],
        images: ['JPG', 'JPEG', 'PNG', 'GIF', 'WEBP']
      }
    },
    sample_usage: {
      evidence_upload: {
        method: 'POST',
        url: '/api/uploads/evidence',
        form_data: 'evidence_files: [file1.pdf, file2.jpg]',
        headers: 'Authorization: Bearer TOKEN, Content-Type: multipart/form-data'
      },
      profile_upload: {
        method: 'POST', 
        url: '/api/uploads/profile',
        form_data: 'profile_image: photo.jpg',
        headers: 'Authorization: Bearer TOKEN, Content-Type: multipart/form-data'
      }
    },
    storage_info: {
      evidence_dir: '/uploads/evidence/',
      profile_dir: '/uploads/profiles/',
      cleanup_schedule: '‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 30 ‡∏ß‡∏±‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥'
    }
  });
});

module.exports = router;